
John Blackburn


Section 1- c++



1. What is a reference? What is a pointer? How are they different?

A reference is when you give another name to an already existing variable. A pointer is a variable whose value is the address of another variable. One difference is that 
references cannot have NULL values while pointers very much can. Another difference is that once a reference is defined to an object it can't be changed to another object
in which pointers can switch objects easily. 


2. Given the following class definition, how would you call the method CalculateMysteries?

class Foo {
public:
  Foo(int bar) : bar_(bar) {}

  int CalculateMysteries();

  static int TotalBars();

private:
  int bar_;

  static int baz_;
};


int main(){
    Foo f;
    f.CalculateMysteries();
}


3. How would you call the method TotalBars()?

int main(){
    Foo f;
    f.TotalBars();
}

4. Can you access the field bar_ from inside the method TotalBars()? Why/why not?

Yes you can because the member bar_ can be accessed from any member function it only cannot be accessed from methods not in the 
Foo class.


5. Can you access the field baz_ from inside the method CalculateMysteries()? Why/why not?

Yes you can for the same reason as above.

6. Create a Foo reference, then call one of the Foo methods.

Foo f;

Foo &d = f;

d.TotalBars();


7. Create a Foo pointer, then call one of the Foo methods.

Foo f;

Foo *p = f;

p->TotalBars();


8. Why would you make a field a pointer?

if you want to store the location of any of the other variables.

Section 2: Good Coding Practices


1. How would you improve the following code block:

bool hasACat = some value from somewhere;

If (hasACat == true) {
  // Do nothing.
} else {
  returnItForADog();
}

If(hasACat==False){
    returnItForADog();
}

2. How would you improve the following code block:

int x = some value from somewhere;
int y = some value from somewhere;

if(y > x) {
  cout << "We're messing with numbers!" << endl;
  x += 1;
} else if(x > y) {
  cout << "We're messing with numbers!" << endl;
  y += 1;
} else if(x == y) {
  cout << "We're messing with numbers!" << endl;
  x = x + y;
}



cout << "We're messing with numbers!" << endl;
if(x == y) {
  x = x + y;
}if(y > x) {
  x += 1;
}else{
    y+=1;
}



Section 3: keywords/const/overloading



1. Why would you use a const field? Why would you use a const method?

You would use a const field, if you want a variable to never change and be static. You would use a const method for the same reason.


2. Where do you instantiate a const field in a class?

You instantiate it in the constructor.

3. What does inheritance give you?

It gives you derived classes from a parent class.

3. Where and why would you use the "virtual" keyword? What is this concept called and why is it important?

You use it in your base class, such that when you call a method with the same name the correct method is run. 
This is called the virtual function and it's important because it keeps the program behaving the way the programmer wants.

4. Why would you need to overload a comparison operator?

So that when you're comparing user defined objects the correct methods/variables are being compared.


Section 4: Version control & git



1. What is a branch? Why would you work on a non-master branch?

A branch is a sub directory in your git repo, you work on these such that you can make changes without interfering with other peoples work.
you push to the master-branch when everyone is in the know of what should be pushed there. 

2. If you are currently working on the branch my-fabulous-feature and your teammate merges another feature into master, what are the commands that you would run to switch to master, get the new code, switch back to your branch, and merge the new code from master into your branch?

git checkout master
git pull
git checkout my-fabulous-feature
git merge master


3. What is the difference between issuing a "git pull" and submitting a "pull request"?

git pull - pulls all the files from the remote repo to your local repo overriding what you already have there

a pull request is the opposite you are pushing your local repo into someone elses repo


4. When you're reviewing a PR, what are 3 different specific things that you should look for in the code that you're reviewing?

is the code followable, can it be compressed, and will it cause any errors if it is approved 

 

Section 5: bash



1. If you are developing in an IDE (such as Sublime, CodeRunner, CodeBlocks, XCode, etc) and your project isn't compiling by pressing the "run/build" button, what are two things that you could do to fix the issue? (Imagine that a friend is having this issue and you are explaining a few things that they could do to figure out what is going on).

You can try and compile it from the terminal or you can check for compile time errors.
 

Section 6: Unit testing/Catch2



1. What is a TEST_CASE? What is a SECTION? What should each be used for? How many methods should be tested in each TEST_CASE? what about each SECTION?

a TEST_CASE is a specific unit test for a section of code you wrote. A SECTION is a part of each TEST_CASE. They're both used to test out code you've written.


Section 7: Design Patterns



1. For each of the following design patterns, briefly describe what problem they solve and how they are implemented in c++.


a. Singleton-this is for when you only ever want a single object of a class, these are implemented using the creational design pattern


b. Flyweight- some methods are same across objects and some are different. seperate intrinsic portion from extrinsic. this is implemented using programmer discipline


c. Prototype - copies object instead of making a new one. want to control the way attributes are copied. creational design pattern


d. Factory - how to seperate object creation from client. takes care of object creation for user.


e. Iterator - access elements in a collection.



2. In class, we went over how you will frequently interact with the design pattern Iterator but will rarely implement it yourselves. Why is this?

Because there are few examples where it is actually useful to use the design pattern.


Section 8: templating/writing generalizable code


1. Write a templated function `void Swap(T & a, T & b)`.

template<typename T>
void swap(T& x, T& y)
{
  T tmp = x;
  x = y;
  y = tmp;
}

2. Write a `main()` in which you make at least two calls to `Swap` that do work and two calls to `Swap` that you would expect to work but that don't.

int main(){
    int x = 0;
    int y = 10;
    bool t = true;
    bool f = false;
    swap(x,y);
    swap(t,f);
    //those should work
    foo f;
    foo t;
    swap(f,t);
    swap(x,f);
    //wont work 
}


3. Adjust the non-working function calls so that they do work and write comments about why they did not intially work and what changes you made.



5. Why/why shouldn't you write all functions in c++ as templated functions?

user defined objects would still have small variances which wouldn't work across all templated functions.

Section 9: GUIs/Qt


1. What happens behind the scenes for a GUI to respond to a user interaction with the user interface?

It waits for something to prompt certain code to be run, like hitting a button causing a certain member function to run.

2. In Qt, how many signals can a single object emit? How many slots can respond to a single signal?

It can emit a single signal per object. as many slots as you want can be attatched to a single signal.

3. Give example signatures for a custom signal that has at least one parameter and the slot that you would connect it to. Give an example call to `connect` that you would use to link the to signal to the slot. Describe when you would call `emit` for this signal. You may need to do some research on your own to answer this question!



